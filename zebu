#!/usr/local/bin/python
#
# zebu is an zfs-based backup utility.  It syncs down a copy of a system to
# a ZFS filesystem, then triggers a ZFS snapshot when done.


import os, sys, getopt, ConfigParser, time
from stat import *
from subprocess import Popen, PIPE, call


class ZEBUError:
    def __init__(self, str=None):
	if str != None:
	    self.string = str
	else:
	    self.string = "Unknown ZEBU error"

    def __str__(self):
	return self.string


class ZEBUValueError(ZEBUError):
    def __init__(self, str=None):
	if str != None:
	    self.string = str
	else:
	    self.string = "Required ZEBU Value not found"


class ZEBUErrorLogger:
    def __init__(self, logpath):
	self.log = []
	self.logpath = logpath

    def logSuccess(self, message):
	tuple = (time.localtime(), "Success", message)
	self.log.append(tuple)

    def logError(self, message):
	tuple = (time.localtime(), "Error", message)
	self.log.append(tuple)

    def logWarning(self, message):
	tuple = (time.localtime(), "Warning", message)
	self.log.append(tuple)

    def flush(self):
	if len(self.log) != 0:
	    try:
		fd = open(self.logpath, 'w')
		for tuple in self.log:
		    fd.write(time.strftime("%d %b %Y %H:%M:%S ", tuple[0]) +
			     tuple[1] + " " +
			     tuple[2])
		fd.close()
	    except:
		raise ZEBUError("Could not write log to " + self.logpath)
	else:
	    m = None
	    try:
		m = os.stat(self.logpath)[ST_MODE]
	    except OSError:
		pass
	    if m != None:
		try:
		    os.unlink(self.logpath)
		except:
		    raise ZEBUError("Could not remove obsolete log file: " + self.logpath)


class ZEBUConfig:
    def __init__(self, file=None):
	if file == None:
	    default_files = ["/etc/zebu/zebu.conf", "/usr/local/etc/zebu/zebu.conf"]
	    for default in default_files:
		try:
		    m = os.stat(default)[ST_MODE]
		    if S_ISREG(m):
			file = default
			break
		except OSError:
		    pass

	if file == None:
	    raise ZEBUError("No config file found.")

	# hardcoded defaults
	self.defaults = {'excludes': None,
			 'additional_excludes': None,
			 'rsync_path': 'rsync',
			 'zfs_path': '/sbin/zfs',
			 'recurse': 'no',
			 'snap_prefix': 'zebu-'
			}

	config = ConfigParser.SafeConfigParser(self.defaults)
	try:
	    list = config.read([file])
	except:
	    raise ZEBUError("Error reading config file " + file)

	self.config = config	# ConfigParser object
	self.filename = list[0]	# config file name

    def __str__(self):
	return self.filename

    def getVaultNames(self):
	return self.config.sections()

    # Allow vault-specific options to override defaults, and declared defaults
    # to override hard-coded defaults.  All this happens automatically in the
    # stock ConfigParser module.
    def getOption(self, vault, option):
	if self.config.has_option(vault, option):
	    return self.config.get(vault, option)
	else:
	    raise ZEBUValueError("Required option \"" + option + "\" not set.")

    def hasVault(self, vault):
	if vault in self.getVaultNames():
	    return True
	else:
	    return False

    def getVault(self, name):
	if name in self.getVaultNames():
	    if self.config.has_option(name, "rsync_server"):
		return ZEBUVault(name, self)
	    else:
		return ZFSfs(name, self)
	else:
	    raise ZEBUError("Vault " + name + " does not exist in " + str(self))


class ZFSfs:
    def __init__(self, name, config):
	self.name = name
	self.config = config
	self.__buildSnapshots__()

    def getZFSProperty(self, prop):
	try:
	    po = Popen([self.zfs_path, 'list', '-o', prop, self.name],
		      stdout=PIPE,stderr=PIPE)
	except OSError, e:
	    raise ZEBUError("Cannot obtain ZFS properties for " + self.name)

	out = po.communicate()[0]
	if po.returncode != 0:
	    raise ZEBUError("Problem obtaining ZFS properties for " + self.name)

	return out.splitlines()[1]

    def __getRecursion__(self):
	r = self.config.getOption(self.name, "recurse")
	if r in ['yes','Yes','true','True','1','y']:
	    return True
	else:
	    return False

    snap_prefix = property(fget=lambda self:
				self.config.getOption(self.name, "snap_prefix"),
			fset=None, fdel=None,
			doc="Prefix for new snapshots")

    recurse = property(fget=__getRecursion__, fset=None, fdel=None,
		       doc="Bool to indicate whether ZFS actions are recursive")

    path = property(fget=lambda self:
			self.getZFSProperty('mountpoint'),
		    fset=None, fdel=None, doc="mountpoint for filesystem")

    zfs_path = property(fget=lambda self: 
			self.config.getOption(self.name, "zfs_path"),
		    fset=None, fdel=None, doc="path to zfs binary")

    def snapshot(self):
	snaptime = time.strftime("%Y%m%d%H%M%S", time.localtime())
	snapname = self.name + '@' + self.snap_prefix + snaptime
	try:
	    if self.recurse:
		ret = call([self.zfs_path, 'snapshot', '-r', snapname])
	    else:
		ret = call([self.zfs_path, 'snapshot', snapname])
	except OSError, e:
	    raise ZEBUError("Could not execute snapshot for " + self.name)
	if ret == 0:
	    return True
	else:
	    raise ZEBUError("Error creating snapshot " + snapname)

    def __buildSnapshots__(self):
	"""
	Builds the internal list of snapshots.  Call again to rebuild.
	"""
	self.snapshots = []
	try:
	    po = Popen([self.zfs_path, 'list', '-o', 'name', '-H',
			'-t', 'snapshot'],
		       stdout=PIPE,stderr=PIPE)
	except OSError, e:
	    raise ZEBUError("Cannot obtain ZFS snapshot list")

	out = po.communicate()[0].splitlines()
	if po.returncode != 0:
	    raise ZEBUError("Problem obtaining ZFS snapshot list")
	prefix = self.name + '@' + self.snap_prefix
	for line in out:
	    if line.startswith(prefix):
		self.snapshots.append(line.split(prefix)[1])

    def cleanup(self):
	"""
	Delete expired snapshots.
	"""
	pass


class ZEBUVault(ZFSfs):
    def __init__(self, name, config):
	ZFSfs.__init__(self, name, config)
	self.tree_path = self.path + "/tree"
	self.rsync_log = self.path + "/rsync_log"
	self.exclude_path = self.path + "/excludes"
	self.logger = ZEBUErrorLogger(self.path + "/zebu_log")
	self.use_excludes = False
	self.recurse = False

    excludes = property(fget=lambda self: 
			self.config.getOption(self.name, "excludes"),
		    fset=None, fdel=None,
		    doc="rsync excludes")

    additional_excludes = property(fget=lambda self: 
			self.config.getOption(self.name, "additional_excludes"),
		    fset=None, fdel=None,
		    doc="more rsync excludes")

    rsync_path = property(fget=lambda self: 
			self.config.getOption(self.name, "rsync_path"),
		    fset=None, fdel=None,
		    doc="path to rsync binary")

    rsync_server = property(fget=lambda self: 
			self.config.getOption(self.name, "rsync_server"),
		    fset=None, fdel=None,
		    doc="remote server for rsync")

    basepath = property(fget=lambda self: 
			self.config.getOption(self.name, "basepath"),
		    fset=None, fdel=None,
		    doc="remote directory for rsync")

    def snapshot(self):
	if self.backup():
	    ZFSfs.snapshot(self)
	else:
	    return False

    def backup(self):
	self.verify()

	# rsync, using hardcoded options.
	rsync_cmd = [self.rsync_path, "-vrltH", "--delete", "-pgo",
		     "--stats", "-D", "--numeric-ids"]
	if self.use_excludes == True:
	    rsync_cmd.append("--exclude-from=" + self.exclude_path)
	rsync_cmd.append(self.rsync_server + ':' + self.basepath)
	rsync_cmd.append(self.tree_path)

	try:
	    fd = open(self.rsync_log, 'w')
	except OSError, e:
	    raise ZEBUError("Could not open rsync log (aborting): " + self.rsync_log)

	try:
	    proc = Popen(rsync_cmd, stdin=None, stdout=fd, stderr=fd)
	    ret = proc.wait()
	except OSError, e:
	    raise ZEBUError("rsync failed, aborting backup " + self.name)

	# return codes shamelessly stolen from dirvish
	retcodes = {
	    0 : [ 'success',     "No errors" ],
	    1 : [ 'fatal',       "syntax or usage error" ],
	    2 : [ 'fatal',       "protocol incompatibility" ],
	    3 : [ 'fatal',       "errors selecting input/output files, dirs" ],
	    4 : [ 'fatal',       "requested action not supported" ],
	    5 : [ 'fatal',       "error starting client-server protocol" ],

	    10 : [ 'error',       "error in socket IO" ],
	    11 : [ 'error',       "error in file IO" ],
	    12 : [ 'check',       "error in rsync protocol data stream" ],
	    13 : [ 'check',       "errors with program diagnostics" ],
	    14 : [ 'error',       "error in IPC code" ],

	    20 : [ 'error',       "status returned when sent SIGUSR1, SIGINT" ],
	    21 : [ 'error',       "some error returned by waitpid()" ],
	    22 : [ 'error',       "error allocating core memory buffers" ],
	    23 : [ 'error',       "partial transfer" ],
	    24 : [ 'warning',     "file vanished on sender" ],

	    30 : [ 'error',       "timeout in data send/receive" ],

	    124 : [ 'fatal',       "remote shell failed" ],
	    125 : [ 'error',       "remote shell killed" ],
	    126 : [ 'fatal',       "command could not be run" ],
	    127 : [ 'fatal',       "command not found" ]
	}

	type = retcodes[ret][0]
	try:
	    if type == 'error' or type == 'fatal':
		self.logger.logError(retcodes[ret][1])
	    if type == 'check' or type == 'warning':
		self.logger.logWarning(retcodes[ret][1])
	    if type == 'success':
		self.logger.logSuccess(retcodes[ret][1])
	except KeyError:
	    self.logger.logWarning("Unknown rsync return code: " + str(ret))

	# save rsync log
	self.logger.flush()

	# Checks and warnings can happen on a (mostly) successful backup
	if type == 'success' or type == 'warning' or type == 'check':
	    return True
	else:
	    return False

    def verify(self):
	# check repopath ISDIR
	try:
	    m = os.stat(self.path)[ST_MODE]
	except OSError, e:
	    raise ZEBUError("Repository not found: " + self.path)
	if not S_ISDIR(m):
	    raise ZEBUError("Repository path not a directory: " + self.path)

	# check tree ISDIR (create, warn)
	try:
	    m = os.stat(self.tree_path)[ST_MODE]
	except OSError, e:
	    # create dir
	    try:
		os.mkdir(self.tree_path, 0755)
		self.logger.logWarning("Created tree directory.")
	    except OSError:
		raise ZEBUError("Tree could not be created for vault " + self.name)

	# Build rsync exclusions
	if self.excludes != "":
	    try:
		ex = open(self.excludes, 'r')
	    except:
		raise ZEBUError("Couldn't open excludes file: " + self.excludes)
	    try:
		myex = open(self.exclude_path, 'w')
		line = ex.readline()
		while(line):
		    myex.write(line)
		    line = ex.readline()
		myex.close()
		ex.close()
		self.use_excludes = True
	    except:
		raise ZEBUError("Can't create excludes file: " + self.exclude_path)
	if self.additional_excludes != "":
	    try:
		ex = open(self.additional_excludes, 'r')
	    except:
		raise ZEBUError("Couldn't open additional excludes file: " + self.additional_excludes)
	    try:
		myex = open(self.exclude_path, 'a')
		line = ex.readline()
		while(line):
		    myex.write(line)
		    line = ex.readline()
		myex.close()
		ex.close()
		self.use_excludes = True
	    except:
		raise ZEBUError("Can't append additional excludes file: " + self.exclude_path)

	# If we aren't using an excludes file, we shouldn't have one.
	if self.use_excludes == False:
	    m = None
	    try:
		m = os.stat(self.exclude_path)[ST_MODE]
	    except OSError:
		pass
	    if m != None:
		try:
		    os.unlink(self.exclude_path)
		    self.logger.logWarning("Removed obsolete exclude file.")
		except:
		    self.logger.logError("Could not remove obsolete exclude file: " + self.exclude_path)


def usage():
    print "zebu [options]"
    print
    print "-h, --help		Print a usage summary"
    print "-f, --config <file>	Use config file at <file>"
    print "-v, --verbose		Be rather verbose"
    print "-s, --no-snapshot		Skip the snapshot phase"


def main():
    # Defaults
    ConfigFile = None
    InitMode = False
    SingleShotVault = None
    Verbose = False
    DoSnapshot = True
    DoCleanup = True

    # Collect command-line args
    try:
	opts, otherargs = getopt.getopt( sys.argv[1:], "hf:iV:vs", ["help","config=","init","vault=","verbose","no-snapshot"] )
    except getopt.GetoptError:
	print "Invalid option found."
	usage()
	sys.exit(1)

    # Parse command-line args
    for o, a in opts:
	if o in ("-h", "--help"):
	    usage()
	    sys.exit(0)
	elif o in ("-f", "--config"):
	    ConfigFile = a
	elif o in ("-i", "--init"):
	    InitMode = True
	elif o in ("-V", "--vault"):
	    SingleShotVault = a
	elif o in ("-v", "--verbose"):
	    Verbose = True
	elif o in ("-s", "--no-snapshot"):
	    DoSnapshot = False
	elif o in ("-c", "--no-cleanup"):
	    DoCleanup = False

    # Load the configuration
    try:
	config = ZEBUConfig(ConfigFile)
    except ZEBUError, e:
	print e
	sys.exit(2)

    if Verbose:
	print "Found config: " + str(config)

    if SingleShotVault != None:
	vaults = [SingleShotVault]
    else:
	vaults = config.getVaultNames()

    for vname in vaults:
	if Verbose:
	    print "Selecting vault: " + vname
	try:
	    vault = config.getVault(vname)
	except ZEBUError, e:
	    print str(e)
	    continue

	#
	# Run snapshot phase
	#
	if DoSnapshot:
	    try:
		if vault.snapshot() == False and Verbose:
		    print vname + ": snapshot failed"
	    except ZEBUError, e:
		print str(e)
	elif Verbose:
	    print vname + ": skipping snapshot"

	#
	# Run cleanup phase
	#
	if DoCleanup:
	    try:
		clean = vault.cleanup()
		if clean == False and Verbose:
		    print vname + ": cleanup failed"
		elif Verbose:
		    for snap in clean:
			print vname + ": deleted snapshot " + snap
	    except ZEBUError, e:
		print str(e)
	elif Verbose:
	    print vname + ": skipping cleanup"

	if Verbose:
	    print "Completed vault: " + vname


if __name__ == "__main__":
    main()
