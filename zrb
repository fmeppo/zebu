#!/usr/local/bin/python
#
# zrb is an rsync-based backup utility.  It syncs down a copy of a system to
# a ZFS filesystem, then triggers a ZFS snapshot when done.


import os, sys, getopt, ConfigParser
from stat import *


class ZRBError:
    def __init__(self, str=None):
	if str != None:
	    self.string = str
	else:
	    self.string = "Unknown ZRB error"

    def __str__(self):
	return self.string


class ZRBValueError(ZRBError):
    def __init__(self, str=None):
	if str != None:
	    self.string = str
	else:
	    self.string = "Required ZRB Value not found"


class ZRBErrorLogger:
    def __init__(self, logpath):
	self.log = []
	self.logpath = logpath

    def logError(self, message):
	pass

    def logWarning(self, message):
	pass

    def flush(self):
	pass


class ZRBConfig:
    def __init__(self, file=None):
	if file == None:
	    default_files = ["/etc/zebu/zrb.conf", "/usr/local/etc/zebu/zrb.conf"]
	    for default in default_files:
		try:
		    m = os.stat(default)[ST_MODE]
		    if S_ISREG(m):
			file = default
			break
		except OSError:
		    pass

	if file == None:
	    raise ZRBError("No config file found.")

	# hardcoded defaults
	self.defaults = {'excludes': None,
			 'additional_excludes': None,
			 'rsync_path': 'rsync'
			}

	config = ConfigParser.SafeConfigParser(self.defaults)
	try:
	    list = config.read([file])
	except:
	    raise ZRBError("Error reading config file " + file)

	self.config = config	# ConfigParser object
	self.filename = list[0]	# config file name

    def __str__(self):
	return self.filename

    def getVaultNames(self):
	return self.config.sections()

    # Allow vault-specific options to override defaults, and declared defaults
    # to override hard-coded defaults.  All this happens automatically in the
    # stock ConfigParser module.
    def getOption(self, vault, option):
	if self.config.has_option(vault, option):
	    return self.config.get(vault, option)
	else:
	    raise ZRBValueError("Required option \"" + option + "\" not set.")

    def hasVault(self, vault):
	if vault in self.getVaultNames():
	    return True
	else:
	    return False

    def getVault(self, name):
	if name in self.getVaultNames():
	    return ZRBVault(name, self)
	else:
	    raise ZRBError("Vault " + name + " does not exist in " + str(self))


class ZRBVault:
    def __init__(self, name, config):
	self.name = name
	self.config = config
	self.tree_path = self.path + "/tree"
	self.rsync_log = self.path + "/rsync_log"
	self.exclude_path = self.path + "/excludes"
	self.logger = ZRBErrorLogger(self.path + "/errors")
	self.use_excludes = False

    path = property(fget=lambda self: 
			self.config.getOption(self.name, "repopath"),
		    fset=None, fdel=None,
		    doc="Vault base path")

    excludes = property(fget=lambda self: 
			self.config.getOption(self.name, "excludes"),
		    fset=None, fdel=None,
		    doc="rsync excludes")

    additional_excludes = property(fget=lambda self: 
			self.config.getOption(self.name, "additional_excludes"),
		    fset=None, fdel=None,
		    doc="more rsync excludes")

    rsync_path = property(fget=lambda self: 
			self.config.getOption(self.name, "rsync_path"),
		    fset=None, fdel=None,
		    doc="more rsync excludes")

    server = property(fget=lambda self: 
			self.config.getOption(self.name, "server"),
		    fset=None, fdel=None,
		    doc="more rsync excludes")

    basepath = property(fget=lambda self: 
			self.config.getOption(self.name, "basepath"),
		    fset=None, fdel=None,
		    doc="more rsync excludes")

    def backup(self):
	self.verify()

	# rsync, using hardcoded options.
	rsync_cmd = self.rsync_path
	rsync_cmd += " -vrltH --delete -pgo --stats -D --numeric-ids "
	if self.use_excludes == True:
	    rsync_cmd += "--exclude-from=" + self.exclude_path + " "
	rsync_cmd += self.server + ":" + self.basepath
	rsync_cmd += " " + self.tree_path

	print rsync_cmd

	# save rsync log
	self.logger.flush()
	# zfs snapshot

    def verify(self):
	# check repopath ISDIR
	try:
	    m = os.stat(self.path)[ST_MODE]
	except OSError, e:
	    raise ZRBError("Repository not found: " + self.path)
	if not S_ISDIR(m):
	    raise ZRBError("Repository path not a directory: " + self.path)

	# check tree ISDIR (create, warn)
	try:
	    m = os.stat(self.tree_path)[ST_MODE]
	except OSError, e:
	    # create dir
	    try:
		os.mkdir(self.tree_path, 0755)
		self.logger.logWarning("Created tree directory.")
	    except OSError:
		raise ZRBError("Tree could not be created for vault " + self.name)

	# Build rsync exclusions
	if self.excludes != "":
	    try:
		ex = open(self.excludes, 'r')
	    except:
		raise ZRBError("Couldn't open excludes file: " + self.excludes)
	    try:
		myex = open(self.exclude_path, 'w')
		line = ex.readline()
		while(line):
		    myex.write(line)
		    line = ex.readline()
		myex.close()
		ex.close()
		self.use_excludes = True
	    except:
		raise ZRBError("Can't create excludes file: " + self.exclude_path)
	if self.additional_excludes != "":
	    print self.additional_excludes
	    try:
		ex = open(self.additional_excludes, 'r')
	    except:
		raise ZRBError("Couldn't open additional excludes file: " + self.additional_excludes)
	    try:
		myex = open(self.exclude_path, 'a')
		line = ex.readline()
		while(line):
		    myex.write(line)
		    line = ex.readline()
		myex.close()
		ex.close()
		self.use_excludes = True
	    except:
		raise ZRBError("Can't append additional excludes file: " + self.exclude_path)

	# If we aren't using an excludes file, we shouldn't have one.
	if self.use_excludes == False:
	    m = None
	    try:
		m = os.stat(self.exclude_path)[ST_MODE]
	    except OSError:
		pass
	    if m != None:
		try:
		    os.unlink(self.exclude_path)
		    self.logger.logWarning("Removed obsolete exclude file.")
		except:
		    self.logger.logError("Could not remove obsolete exclude file: " + self.exclude_path)


def usage():
    print "zrb [options]"
    print
    print "-h, --help		Print a usage summary"
    print "-f, --config <file>	Use config file at <file>"
    print "-v, --verbose	Be rather verbose"


def main():
    # Defaults
    ConfigFile = None
    InitMode = False
    SingleShotVault = None
    Verbose = False

    # Collect command-line args
    try:
	opts, otherargs = getopt.getopt( sys.argv[1:], "hf:iV:v", ["help","config=","init","vault=","verbose"] )
    except getopt.GetoptError:
	print "Invalid option found."
	usage()
	sys.exit(1)

    # Parse command-line args
    for o, a in opts:
	if o in ("-h", "--help"):
	    usage()
	    sys.exit(0)
	elif o in ("-f", "--config"):
	    ConfigFile = a
	elif o in ("-i", "--init"):
	    InitMode = True
	elif o in ("-V", "--vault"):
	    SingleShotVault = a
	elif o in ("-v", "--verbose"):
	    Verbose = True

    # Load the configuration
    try:
	config = ZRBConfig(ConfigFile)
    except ZRBError, e:
	print e
	sys.exit(2)

    if Verbose:
	print "Found config: " + str(config)

    if SingleShotVault != None:
	vaults = [SingleShotVault]
    else:
	vaults = config.getVaultNames()

    for vname in vaults:
	if Verbose:
	    print "Dumping vault: " + vname
	try:
	    vault = config.getVault(vname)
	except ZRBError, e:
	    print str(e)
	    continue
	try:
	    vault.backup()
	except ZRBError, e:
	    print str(e)


if __name__ == "__main__":
    main()
