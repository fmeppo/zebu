#!/usr/local/bin/python
#
# zrb is an rsync-based backup utility.  It syncs down a copy of a system to
# a ZFS filesystem, then triggers a ZFS snapshot when done.


import os, sys, getopt, ConfigParser
from stat import *


class ZRBError:
    def __init__(self, str=None):
	if str != None:
	    self.string = str
	else:
	    self.string = "Unknown ZRB error"

    def __str__(self):
	return self.string


class ZRBErrorLogger:
    def __init__(self, logpath):
	self.log = []
	self.logpath = logpath

    def logError(self, message):
	pass

    def logWarning(self, message):
	pass

    def flush(self):
	pass


class ZRBConfig:
    def __init__(self, file=None):
	if file == None:
	    default_files = ["/etc/zrb.conf", "/usr/local/etc/zrb.conf"]
	    for default in default_files:
		try:
		    m = os.stat(default)[ST_MODE]
		    if S_ISREG(m):
			file = default
			break
		except OSError:
		    pass

	if file == None:
	    raise ZRBError("No config file found.")

	config = ConfigParser.ConfigParser()
	try:
	    list = config.read([file])
	except:
	    raise ZRBError("Error reading config file " + file)

	self.config = config	# ConfigParser object
	self.filename = list[0]	# config file name

	# hardcoded defaults
	self.defaults = []

    def __str__(self):
	return self.filename

    def getVaultNames(self):
	return self.config.sections()

    # Allow volume-specific options to override defaults, and declared defaults
    # to override hard-coded defaults.
    def getOption(self, volume, option):
	if self.config.has_option(volume, option):
	    return self.config.get(volume, option)
	else:
	    if self.config.has_option("DEFAULTS", option):
		return self.config.get("DEFAULTS", option)
	    else:
		try:
		    return self.defaults[option]
		except e:
		    raise ZRBError("Required option \"" + option + "\" not set.")

    def hasVault(self, vault):
	if vault in self.getVaultNames():
	    return True
	else:
	    return False

    def getVault(self, name):
	if name in self.getVaultNames():
	    return ZRBVault(name, self)
	else:
	    raise ZRBError("Vault " + name + " does not exist in " + str(self))

    def getVaultPath(self, vault):
	if self.config.has_option(vault, "repopath"):
	    return self.config.get(vault, "repopath")
	else:
	    if self.config.has_option("DEFAULTS", "repopath"):
		return self.config.get("DEFAULTS", "repopath") + "/" + str(vault)
	    else:
		raise ZRBError("Required repository path (\"repopath\") not defined.")


class ZRBVault:
    def __init__(self, name, config):
	self.name = name
	self.config = config
	self.path = config.getVaultPath(name)
	self.tree_path = self.path + "/tree"
	self.rsync_log = self.path + "/rsync_log"
	self.logger = ZRBErrorLogger(self.path + "/errors")

    def backup(self):
	self.verify()
	# rsync
	# save rsync log
	self.logger.flush()
	# zfs snapshot

    def verify(self):
	# check repopath ISDIR
	try:
	    m = os.stat(self.path)[ST_MODE]
	except e:
	    raise ZRBError("Repository not found: " + self.path)
	if not S_ISDIR(m):
	    raise ZRBError("Repository path not a directory: " + self.path)

	# check tree ISDIR (create, warn)
	try:
	    m = os.stat(self.tree_path)[ST_MODE]
	except e:
	    # create dir
	    pass


def usage():
    print "zrb [options]"
    print
    print "-h, --help		Print a usage summary"
    print "-f, --config <file>	Use config file at <file>"
    print "-v, --verbose	Be rather verbose"


def main():
    # Defaults
    ConfigFile = None
    InitMode = False
    SingleShotVault = None
    Verbose = False

    # Collect command-line args
    try:
	opts, otherargs = getopt.getopt( sys.argv[1:], "hf:iV:v", ["help","config=","init","vault=","verbose"] )
    except getopt.GetoptError:
	print "Invalid option found."
	usage()
	sys.exit(1)

    # Parse command-line args
    for o, a in opts:
	if o in ("-h", "--help"):
	    usage()
	    sys.exit(0)
	elif o in ("-f", "--config"):
	    ConfigFile = a
	elif o in ("-i", "--init"):
	    InitMode = True
	elif o in ("-V", "--vault"):
	    SingleShotVault = a
	elif o in ("-v", "--verbose"):
	    Verbose = True

    # Load the configuration
    try:
	config = ZRBConfig(ConfigFile)
    except ZRBError, e:
	print e
	sys.exit(2)

    if Verbose:
	print "Found config: " + str(config)

    if SingleShotVault != None:
	vaults = [SingleShotVault]
    else:
	vaults = config.getVaultNames()

    for vname in vaults:
	if Verbose:
	    print "Dumping vault: " + vname
	try:
	    vault = config.getVault(vname)
	except ZRBError, e:
	    print str(e)
	    continue
	try:
	    vault.backup()
	except ZRBError, e:
	    print str(e)


if __name__ == "__main__":
    main()
